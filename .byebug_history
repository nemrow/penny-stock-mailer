q
all_open_stocks_json
stock_data
quit
JSON.load(open(all_open_stocks_url))["results"]
open(all_open_stocks_url)
open(all_open_stocks_url).body
open(all_open_stocks_url)
JSON.parse(open(all_open_stocks_url))
JSON.parse(JSON.load(open(all_open_stocks_url)).to_json)["results"]
q
all_open_transactions.map{|transaction| transaction.stock.symbol}
all_open_transactions.map(&:stock_id)
JSON.parse(JSON.load(open(all_open_stocks_url)).to_json)["results"]
q
JSON.parse(JSON.load(open(all_open_stocks_url)).to_json)["results"]
q
qy
Transaction.all_open.pluck(:stock_id).include?(stock.id)
Transaction.all_open.pluck(:stock_id)
Transaction.all_open.last
Transaction.all_open
stock
q
stock_data
q
@floor_touch_count
q
firebase_stock_data.body["plots"]
firebase_stock_data.body
firebase_stock_data
quit
stock_client.get(@stock.firebase_id).body
stock_client.get(@stock.firebase_id)
@stock.firebase_id
firebase_stock_data.body
firebase_stock_data
quit
stock_client.set("#{@firebase_id}/plots", plot_series)
plot_series = [new_plot]
stock_client.set("#{@firebase_id}/plots", [1,23])
[new_plot]
plot_series
c
current_plot_series
current_plot_series.shift
current_plot_series
current_plot_series.push(8)
current_plot_series
c
stock_client.get("#{@firebase_id}/plots").body
stock_client.get("#{@firebase_id}/plots").body.child(1)
stock_client.get("#{@firebase_id}/plots").body
stock_client.get("#{@firebase_id}/plots").boyd
stock_client.get("#{@firebase_id}/plots")
stock_client.get("plots").body
stock_client.get("plot").body
stock_client.get("stocks").body
stock_client.get("stock").body
stock_client.get("stock")
stock_client..body
stock_client.get("plots").body
stock_client.get("plots")
stock_client
stock_clinet
q
new_ploy.body["name"]
new_ploy.body.name
new_ploy.body.nanme
new_ploy.body
new_ploy
"#{new_ploy.body.id}"
quit
stock_client.get("#{@firebase_id}/plots").body.first[0]
stock_client.get("#{@firebase_id}/plots").body.first
stock_client.get("#{@firebase_id}/plots").body
stock_client.get("#{@firebase_id}/plots").response
stock_client.get("#{@firebase_id}/plots").raw_body
stock_client.get("#{@firebase_id}/plots").methods
stock_client.get("#{@firebase_id}/plots")
stock_client.get("#{@firebase_id}/plots").body[0]
stock_client.get("#{@firebase_id}/plots").body
stock_client.get("#{@firebase_id}/plots").body.first
stock_client.get("#{@firebase_id}/plots").body.first.id
stock_client.get("#{@firebase_id}/plots").body.first
stock_client.get("#{@firebase_id}/plots").body.first.name
stock_client.get("#{@firebase_id}/plots").body.first.id
stock_client.get("#{@firebase_id}/plots").body.first
stock_client.get("#{@firebase_id}/plots").body.count
stock_client.get("#{@firebase_id}/plots").body
stock_client.get("#{@firebase_id}/plots").count
stock_client.get("#{@firebase_id}/plots")
q
stock_client.get("#{@firebase_id}/plots").body
stock_client.get("#{@firebase_id}/plots")
stock_client.get("#{@firebase_id}/plots").body
q
reload!
series.count
series.count(series)
series.count
series
series.delete(series)
series.delete()
series.delete(series.first)
series.count
series
series.delete(series.first)
quit
series.count
series.push({price: @current_price, timestamp: @timestamp})
series.count
n
series.count
series
q
firebase_stock_object["series"].count
firebase_stock_object["series"]
q
[].push("w")
firebase_stock_object["name"]
firebase_stock_object.name
stock_client.get(@firebase_id).body["series"]
stock_client.get(@firebase_id).body["seroes"]
stock_client.get(@firebase_id)
firebase_stock_object[""stock_client.get(@firebase_id)]
q
symbols_array.zip(names_array)
q
doc.css('#screener-content td:nth-child(3) a.screener-link').map(&:text)
doc.css('#screener-content td:nth-child(3) a').map(&:text)
symbols_array.zip(names_array)
q
doc.css('#screener-content td:nth-child(3) a').map(&:text)
doc.css('td:nth-child(3) a').map(&:text)
doc.css('#screener-content table tbody tr:nth-child(2) td:nth-child(3) a').map(&:text)
doc.css('#screener-content table > tbody > tr:nth-child(2) > td:nth-child(3) > a').map(&:text)
doc.css('#screener-content > table > tbody > tr:nth-child(4) > td > table > tbody > tr:nth-child(2)').map(&:text)
doc.css('#screener-content > table > tbody > tr:nth-child(4) > td > table > tbody > tr:nth-child(2) > td:nth-child(3) > a').map(&:text)
doc.css('div#screener-content td a.screener-link').map(&:text)
doc.css('div#screener-content td.screener-body-table-nw a.screener-link').map(&:text)
doc.css('div#screener-content td a.screener-link').map(&:text)
symbols_array.zip(names_array)
q
doc.css('div#screener-content td a.screener-link').map(&:text)
doc.css('div#screener-content td a.screener-link-primary').map(&:text)
doc.css('div#screener-content td a.screener-link-primary')
q
all_symbols
ValidPennyStockGetter
q
stock_object_array[index].firebase_id
stock_object_array[index]
stock_json
stock_object_array[index]
stock_object_array
index
stock_json
q
symbols_string
stock_json_array.map{|i|i["symbol"]}
symbols_string
stock_json_array
symbols_string
q
firebase_object.body["name"]
firebase_object.body[:name]
firebase_object.body.name
firebase_object.body.na,e
firebase_object.name
firebase_object.body
firebase_object.body.id
firebase_object.body
firebase_object
q
Stock.count
Stock.destroy_all
firebas_object.id
firebas_object
firebas_object.body
self.symbol
firebas_object.body
firebas_object
firebas_object.id
firebas_object
self
quit
Stock.destroy_all
firebase_base_client.get("stock", {symbol: "AAMEE"}).body
firebase_base_client.get("stock", {symbol: "AAME"}).body
stock_client.get("stocks", {symbol: "AAME"}).body
stock_client.get("stock", {symbol: "AAME"}).body
stock_client.get({symbol: "AAME"}).body
firebase_base_client.get("stocks", {symbol: "AAME"}).body
firebase_base_client.get("stocks", {"symbol" => "AAME"}).body
firebase_base_client.get("stocks", {"symbol": "AAME"}).body
firebase_base_client.get("stocks", {symbol: "AAME"}).body
firebase_base_client.get("stocks", {symbol: "AA"}).body
q
firebase.get("stock", {symbol: ""}).body
firebase.get("stock", {symbol: "sdsss"}).body
chars = firebase.get("stock", {symbol: "sdsss"})
chars.body
chars
chars = firebase.get("stock", {symbol: "sds"})
firebase.get("stock", {symbol: "sds"})
firebase
q
stock_json
q
stock_json.first["symbol"]
stock_json.first
stock_json
q
stock_json
q
JSON.load(open(api_url(symbols_string)))["results"]
JSON.load(open(api_url(symbols_string)))["response"]
JSON.load(open(api_url(symbols_string)))
JSON.load(open(api_url(symbols_string))))
ar.concat([6,7,8])
ar.concat(')
ar = [1,2,3]
JSON.parse(JSON.load(open(api_url(symbols_string))).to_json)["results"]
q
JSON.parse(JSON.load(open(self.api_url(symbols_string))).to_json)["results"]
q
JSON.parse(JSON.load(open(api_url(symbols_string))).to_json)["results"]
q
JSON.parse(JSON.load(open(all_open_stocks_url)).to_json)["results"]
q
Stock.count
Stock.find_or_create_by(symbol: symbol)
Stock.count
Stock.find_or_create_by(symbol: symbol)
Stock.find_or_create(symbol: symbol)
Stock
symbol
quit
@floor_touch_count
q
stock_json.map{ |minute| minute["close"].to_d }.first
stock_json.map{ |minute| minute["close"].to_d }.first.to_f
stock_json.map{ |minute| minute["close"].to_d }.first
stock_json.map{ |minute| minute["close"].to_d }
stock_json.map{ |minute| minute["close"].to_i }
stock_json.map{ |minute| minute["close"].to_f }
stock_json.pluck("close")
stock_json.map(:close)
stock_json.map(":close)
stock_json.map("close")
stock_json.first['close']
stock_json
quit
stock_json.each{|i|puts i["timestamp"]}
q
