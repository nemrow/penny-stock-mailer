quit
FirebaseTransaction.find_by({stock: "-K65H6JYLxVzkrLgMLfQ", open: true}).first
FirebaseTransaction.find_by({stock: "-K65H6JYLxVzkrLgMLfQ", open: true}).count
FirebaseTransaction.find_by({stock: "-K65H6JYLxVzkrLgMLfQ", open: true})
FirebaseTransaction.find_by({stock: "-K65H6JYLxVzkrLgMLfQ"}).first
FirebaseTransaction.find_by({stock: "-K65H6JYLxVzkrLgMLfQ"}).count
FirebaseTransaction.find_by({stock: "-K65H6JYLxVzkrLgMLfQ"}).first
FirebaseTransaction.find_by({open: true}).first
FirebaseTransaction.find_by({open: true})
@stock_data["lastPrice"].to_f <= (@transaction.buy.to_f - 0.01)
@stock_data["lastPrice"].to_f >= (@transaction.buy.to_f + 0.01)
@transaction.buy.to_f + 0.01
@stock_data["lastPrice"].to_f
lost_by_one_cent
@stock_data
@stock
@transaction
gained_by_one_cent
q
stock_data
q
all_open_transactions.first.symbol
all_open_transactions.first.stock
all_open_transactions.first
q
all_open_stocks_json
q
all_open_stocks_json
q
FirebaseTransaction.find_by({stock: @stock.id, open: true}).first
@stock.transactions
@stock
quit
stock.transactions
stock
q
@stock.transactions
@stock
q
@quantity
@price
q
reload!
@stock.plots.firstrelor
@stock.price
@stock
quit
all_open_stock_ids_array.include?("-K6FZkjzyo0_T6D9_4mR")
all_open_stock_ids_array
all_open_stock_ids_array.include?(stock.id)
q
FirebaseTransaction.find_by({open: true}).map{|stock| stock.id}
FirebaseTransaction.find_by({open: true})
stock.id
all_open_stock_ids_array
stock
q
FirebaseTransaction.find_by({open: false}).count
FirebaseTransaction.find_by({open: true}).count
FirebaseTransaction.find_by({open: true})
FirebaseTransaction.find({open: true})
quit
false.class
flase.class
true.class
true.classs
Boolean
true.kind_of?(Array)
true.kind_of?(Boolean)
true.kind_of?(Bool)
FirebaseStock.find_by({symbol: "AAME"}).count
FirebaseTransaction.find_by({open: true}).count
FirebaseTransaction.find_by({open: 'true'}).count
FirebaseTransaction.find_by({open: 'false'}).count
FirebaseTransaction.all.count
FirebaseTransaction.find_by({open: false}).count
FirebaseTransaction.find_by({open: true})
FirebaseTransaction.find({open: true})
q
qui
transaction
stock.id
stock
transaction.id
transaction
transaction.save
transaction
transaction.open = "6"
transaction
transaction.stock
transaction
stock
q
firebase_object_ids_hash.keys
firebase_object_ids_hash.pluck(:key)
firebase_object_ids_hash
q
transaction.stock
transaction
stock.transactions
stock
q
stock.transactions
q
stock.transactions
stock.transactions.first
q
stock.transactions
stock.transactions.first
stock.transactions.first.id
FirebaseTransaction.find(stock.transactions.first.id)
FirebaseTransaction.find(stock.transactions.first)
stock
FirebaseTransaction.find(stock.transaction)
transaction
FirebaseTransaction.find(stock.transaction)
FirebaseTransactions.find(stock.transaction)
Transactions.find(stock.transaction)
transaction.stock
transaction
q
transaction.stock
transaction
stock.transactions
stock
q
k
hash.merge(attr_accessors_hash)
k
c
k
c
"#{v}"
v
k
associations_array
q
associations_array << attr
associations_array
q
associations_array
q
associations_array
self.class.associations_array
associations_array
q
self.has_many
self
c
transaction
transaction.stock
transaction
stock
q
quit
stock_object_array[index].id
stock_object_array[index]
stock_json
stock_object_array[index]
stock_object_array
stock_json
stock_json["lastPrice"]
q
stock_json_array.first
stock_json_array
q
stock_object_array.map{|i|i.symbol}
stock_object_array.map{|i|i.synmbol}
stock_object_array.first.symbol
stock_object_array.first
stock_object_array.count
stock_object_array
stock_objecta_array
quit
symbols_string
get_stock_json(symbols_string)symbols_string
symbols_string
c
stock.transactions
c
stock.transactions
stock.transaction
stock
c
q
stock.transactions="s"
stock.transactions=
stock.transactions
stock
c
self
attr
q
self.as_firebase_json
q
self
c
q
self
c
q
self.send("#{attr}")
args.kind_of?(Array)
args.type_of?(Array)
args.is_type_of?(Array)
args.is_type?(Array)
args.is_array?
attr
args
q
self.as_json
self
self.to_params
inspect
instance_variables
self.methods
self.attributes
self
self.to_firebase_json
c
q
self.class.
class
self
c
transaction
q
self.instance_variable_names
self.methods
self.id.exists?
self.id.ecists?
self.id
self.idd
self["id"]
self.idd
self.id
self.
self.method_defined?(:j)q
self.remove_instance_variable("@ids")
self.to_json
self
self.remove_instance_variable("@id")
self.remove_instance_variable(:id)
self.methods
self.delete(:id)
self.
self
self.
self.to_json
self.firebase_model
self.id
id
if
self
c
self
